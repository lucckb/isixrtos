#For which target
TARGET=arm-none-eabi

#Basename for binary
BASENAME="arm-none-eabi-gcc"

#Parallel build
export MAKEFLAGS="-j8"


#Library versions
BINUTILS_VER="2.32"
GCC_VER="9.2.0"
NEWLIB_VER="3.1.0"
GDB_VER="8.3"


#Downloads URL
declare -A dl_urls
dl_urls=(
		  [binutils]="http://ftp.gnu.org/gnu/binutils/binutils-$BINUTILS_VER.tar.gz" \
		  [gccbase]="ftp://ftp.gwdg.de/pub/misc/gcc/releases/gcc-$GCC_VER/gcc-$GCC_VER.tar.gz" \
		  [gcc]="ftp://ftp.gwdg.de/pub/misc/gcc/releases/gcc-$GCC_VER/gcc-$GCC_VER.tar.gz" \
		  [newlib]="ftp://sourceware.org/pub/newlib/newlib-$NEWLIB_VER.tar.gz" \
		  [gdb]="http://ftp.gnu.org/gnu/gdb/gdb-$GDB_VER.tar.xz" \
		)


CHOST=x86_64-apple-darwin18
		

#BASE build path
BASEDIR=$(pwd)/tmp
DLDIR="$BASEDIR/dl"
PREFIX="/usr/local/arm-none-eabi-gcc"
BPREFIX="$BASEDIR/tbuild"
export PATH=$PATH:$DESTDIR/usr/local/bin:$BPREFIX


declare -A dl_names
declare -A pkg_dirs
for index in ${!dl_urls[*]}
do
	name="$(basename ${dl_urls[$index]})" 
	namene=${name%.*}
	namene=${namene%.*}
	dl_names+=( [$index]="$name" )
	pkg_dirs+=( [$index]="$namene" )
done


download() {
echo "Num files for download: ${#dl_urls[*]}"
for item in ${dl_urls[*]}
do
	local bn=$(basename $item)
	if [ ! -f "$DLDIR/$bn" ]; then
		printf " Downloading %s\n" $bn
		wget -P $DLDIR $item
	fi
done
}

unpackall() {
for index in ${!dl_names[*]}
do
	local item="${dl_names[$index]}" 
	local diri="${pkg_dirs[$index]}" 
	if [ ! -d "$BASEDIR/$diri" ]; then
		echo "Unpacking $item ..."
		tar xf "$DLDIR/$item" -C $BASEDIR
	fi
done
}

prepare_dirs() {
	mkdir -p $DLDIR
	mkdir -p $BPREFIX
	cd $BPREFIX
	for i in /usr/local/bin/x86_64-apple-darwin18-*; do  
		name=$(basename $i); ln -sf $i  ${name/-9/};
	done
	cd -
	${CHOST}-gcc -v
}

