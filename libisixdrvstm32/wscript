#!/usr/bin/env python

import platform
import os


def options(opt):
    pass

def configure(conf):
    conf.define('CONFIG_ISIX_USE_TIMERS',1)


def build(bld):
    _srcs = [ 'usart_buffered.cpp' , 'stm32_spi_master.cpp' ]
    if bld.is_defined('STM32MCU_MAJOR_TYPE_F1'):
        _srcs += [ 'adc_converter.cpp', 'i2c_bus.cpp' ]
        _srcs += [ 'stm32_spi_master_dma.cpp' ]
    elif bld.is_defined('STM32MCU_MAJOR_TYPE_F2'):
        _srcs += [ 'adc_converter.cpp', 'i2c_bus.cpp' ]
        _srcs += [ 'stm32_sdio_mmc_host.cpp' ]
    elif bld.is_defined('STM32MCU_MAJOR_TYPE_F37'):
        pass
    elif bld.is_defined('STM32MCU_MAJOR_TYPE_F3'):
        pass
    elif bld.is_defined('STM32MCU_MAJOR_TYPE_F4'):
        _srcs += [ 'adc_converter.cpp', 'i2c_bus.cpp' ]
        _srcs += [ 'stm32_sdio_mmc_host.cpp' ]
    elif bld.is_defined('STM32MCU_MAJOR_TYPE_F7'):
        #TODO: Add support in lib
        pass
    else:
        bld.fatal( 'libisixdrv: Unknown target CPU' )
    _use =['isix', 'foundation', 'stm32','common_conf' ]
    # TCPIP stack
    if bld.env.ISIX_COMPILE_TCPIP_DRIVERS:
        _use += [ 'tcpip' ]
        _srcs += [ 'ethernet/ethernetif.c' ]
        _srcs += bld.path.ant_glob( 'ethernet/phy_*.c')
        if bld.is_defined('STM32MCU_MAJOR_TYPE_F1'):
            _srcs += [ 'ethernet/ethernetif_f1.c' ]
        elif bld.is_defined('STM32MCU_MAJOR_TYPE_F2'):
            _srcs += [ 'ethernet/ethernetif_f2.c' ]
        elif bld.is_defined('STM32MCU_MAJOR_TYPE_F37'):
            bld.fatal( 'libisixdrv: This type of mcu lack of ETH support' )
        elif bld.is_defined('STM32MCU_MAJOR_TYPE_F4'):
            _srcs += [ 'ethernet/ethernetif_f4.c' ]
    _srcs += [ 'mmc/mmc_card.cpp', 'mmc/mmc_slot.cpp', 'mmc/mmc_command.cpp',
            'mmc/mmc_host_spi.cpp' ]
    _incs = [ 'include', 'mmc/include' ]
    bld.stlib( source=_srcs,
            target='isixdrvstm32',
            includes = _incs,
            export_includes = _incs,
            use = _use,
    )





